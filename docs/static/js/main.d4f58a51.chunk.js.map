{"version":3,"sources":["logo.svg","ReadString.js","SetString.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ReadString","state","dataKey","this","props","drizzle","contracts","MyStringStore","methods","cacheCall","setState","myString","drizzleState","react_default","a","createElement","value","React","Component","SetString","stackId","handleKeyDown","e","keyCode","_this","setValue","target","_this$props","cacheSend","from","accounts","getTxStatus","_this$props$drizzleSt","transactions","txHash","transactionStack","concat","status","type","onKeyDown","App","loading","_this2","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","className","src_ReadString","src_SetString","Boolean","window","location","hostname","match","options","web3","fallback","url","Drizzle","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"yyZAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+SC4BzBC,4NAzBbC,MAAQ,CAAEC,QAAS,yFAEC,IAKZA,EAJcC,KAAKC,MAAjBC,QACiBC,UAAUC,cAGVC,QAAT,SAA6BC,YAG7CN,KAAKO,SAAS,CAAER,6CAGT,IAKDS,EAHoBR,KAAKC,MAAMQ,aAAaN,UAA1CC,cAGuBI,SAASR,KAAKF,MAAMC,SAGnD,OAAOW,EAAAC,EAAAC,cAAA,8BAAsBJ,GAAYA,EAASK,cAtB7BC,IAAMC,YC+ChBC,6MA9CblB,MAAQ,CAAEmB,QAAS,QAEnBC,cAAgB,SAAAC,GAEI,KAAdA,EAAEC,SACJC,EAAKC,SAASH,EAAEI,OAAOV,UAI3BS,SAAW,SAAAT,GAAS,IAAAW,EACgBH,EAAKpB,MAA/BC,EADUsB,EACVtB,QAASO,EADCe,EACDf,aAIXQ,EAHWf,EAAQC,UAAUC,cAGVC,QAAT,IAAwBoB,UAAUZ,EAAO,CACvDa,KAAMjB,EAAakB,SAAS,KAI9BN,EAAKd,SAAS,CAAEU,eAGlBW,YAAc,WAAM,IAAAC,EAEyBR,EAAKpB,MAAMQ,aAA9CqB,EAFUD,EAEVC,aAGFC,EALYF,EAEIG,iBAGUX,EAAKvB,MAAMmB,SAG3C,OAAKc,EAGL,uBAAAE,OAA8BH,EAAaC,IAAWD,EAAaC,GAAQG,QAHvD,8EAOpB,OACExB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOuB,KAAK,OAAOC,UAAWpC,KAAKkB,gBACnCR,EAAAC,EAAAC,cAAA,WAAMZ,KAAK4B,uBAzCKd,IAAMC,WC6CfsB,6MAvCbvC,MAAQ,CAAEwC,SAAS,EAAM7B,aAAc,yFAEnB,IAAA8B,EAAAvC,KACVE,EAAYF,KAAKC,MAAjBC,QAGRF,KAAKwC,YAActC,EAAQuC,MAAMC,UAAU,WAGzC,IAAMjC,EAAeP,EAAQuC,MAAME,WAG/BlC,EAAamC,cAAcC,aAC7BN,EAAKhC,SAAS,CAAE+B,SAAS,EAAO7B,kEAMpCT,KAAKwC,+CAIL,OAAIxC,KAAKF,MAAMwC,QAAgB,qBAE7B5B,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,OACbpC,EAAAC,EAAAC,cAACmC,EAAD,CACE7C,QAASF,KAAKC,MAAMC,QACpBO,aAAcT,KAAKF,MAAMW,eAE3BC,EAAAC,EAAAC,cAACoC,EAAD,CACE9C,QAASF,KAAKC,MAAMC,QACpBO,aAAcT,KAAKF,MAAMW,uBAjCjBM,aCKEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wECPAC,EAAU,CACdnD,UAAW,SACXoD,KAAM,CACJC,SAAU,CACRrB,KAAM,KACNsB,IAAK,yBAMLvD,EAAU,IAAIwD,UAAQJ,GAE5BK,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,CAAK3D,QAASA,IAAa4D,SAASC,eAAe","file":"static/js/main.d4f58a51.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nclass ReadString extends React.Component {\n  state = { dataKey: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const contract = drizzle.contracts.MyStringStore;\n\n    // let drizzle know we want to watch the `myString` method\n    const dataKey = contract.methods[\"myString\"].cacheCall();\n\n    // save the `dataKey` to local component state for later reference\n    this.setState({ dataKey });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const { MyStringStore } = this.props.drizzleState.contracts;\n\n    // using the saved `dataKey`, get the variable we're interested in\n    const myString = MyStringStore.myString[this.state.dataKey];\n\n    // if it exists, then we display its value\n    return <p>My stored string: {myString && myString.value}</p>;\n  }\n}\n\nexport default ReadString;","import React from \"react\";\n\nclass SetString extends React.Component {\n  state = { stackId: null };\n\n  handleKeyDown = e => {\n    // if the enter key is pressed, set the value with the string\n    if (e.keyCode === 13) {\n      this.setValue(e.target.value);\n    }\n  };\n\n  setValue = value => {\n    const { drizzle, drizzleState } = this.props;\n    const contract = drizzle.contracts.MyStringStore;\n\n    // let drizzle know we want to call the `set` method with `value`\n    const stackId = contract.methods[\"set\"].cacheSend(value, {\n      from: drizzleState.accounts[0]\n    });\n\n    // save the `stackId` for later reference\n    this.setState({ stackId });\n  };\n\n  getTxStatus = () => {\n    // get the transaction states from the drizzle state\n    const { transactions, transactionStack } = this.props.drizzleState;\n\n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackId];\n\n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n\n    // otherwise, return the transaction status\n    return `Transaction status: ${transactions[txHash] && transactions[txHash].status}`;\n  };\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" onKeyDown={this.handleKeyDown} />\n        <div>{this.getTxStatus()}</div>\n      </div>\n    );\n  }\n}\n\nexport default SetString;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ReadString from \"./ReadString\";\nimport SetString from \"./SetString\";\n\n\nclass App extends Component {\n  state = { loading: true, drizzleState: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n\n    // subscribe to changes in the store\n    this.unsubscribe = drizzle.store.subscribe(() => {\n\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();\n\n      // check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    if (this.state.loading) return \"Loading Drizzle...\";\n    return (\n      <div className=\"App\">\n        <ReadString\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />\n        <SetString\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import drizzle functions and contract artifact\nimport { Drizzle, generateStore } from \"drizzle\";\nimport MyStringStore from \"./contracts/MyStringStore.json\";\n\n// let drizzle know what contracts we want and how to access our test blockchain\nconst options = {\n  contracts: [MyStringStore],\n  web3: {\n    fallback: {\n      type: \"ws\",\n      url: \"ws://127.0.0.1:9545\",\n    },\n  },\n};\n\n// setup the drizzle store and drizzle\nconst drizzle = new Drizzle(options);\n\nReactDOM.render(<App drizzle={drizzle} />, document.getElementById('root'));"],"sourceRoot":""}